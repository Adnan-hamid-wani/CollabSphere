generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  createdTasks  Task[] @relation("CreatedTasks")
  assignedTasks Task[] @relation("AssignedTasks")

  // ðŸ‘‡ Back-relation for TaskActivity (actor)
  taskActivities TaskActivity[] @relation("ActorActivities")
}

model Task {
  id          String  @id @default(cuid())
  title       String
  description String?
  status      String  @default("TODO")
  feedback    String?
  assignedTo  String
  createdBy   String

  assignedUser User @relation("AssignedTasks", fields: [assignedTo], references: [id])
  creator      User @relation("CreatedTasks", fields: [createdBy], references: [id])

  createdAt          DateTime  @default(now())
  submittedForReview Boolean   @default(false)
  submittedAt        DateTime?
  approvedAt         DateTime?

  // ðŸ‘‡ Back-relation for TaskActivity (task)
  activities TaskActivity[] @relation("TaskActivities")
}

model TaskActivity {
  id        String   @id @default(uuid())
  taskId    String
  actorId   String
  action    String // e.g. "CREATED", "UPDATED", "COMPLETED"
  message   String // e.g. "Task X approved by Admin"
  createdAt DateTime @default(now())

  task  Task @relation("TaskActivities", fields: [taskId], references: [id], onDelete: Cascade)
  actor User @relation("ActorActivities", fields: [actorId], references: [id])
}

enum Role {
  ADMIN
  USER
}
